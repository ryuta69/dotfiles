{
  "ForArray": {
    "prefix": ["forarray"],
    "body": [
      "for (i, &item) in arr.iter().enumerate() {",
      "\tprintln!(\"the value is: {}\", &item);",
      "}"
    ]
  },
  "StrToArray": {
    "prefix": ["strtoarray"],
    "body": ["let bytes = str.as_bytes();"]
  },
  "ReverseArray": {
    "prefix": ["reversearray"],
    "body": ["$1.rev()"]
  },
  "Int Case": {
    "prefix": ["int case"],
    "body": [
      "use std::cmp::Ordering;",
      "",
      "fn main() {",
      "\tmatch ans.cmp(&secret_number) {",
      "\t\tOrdering::Less => println!(\"Too small!\"),",
      "\t\tOrdering::Greater => println!(\"Too big!\"),",
      "\t\tOrdering::Equal => {",
      "\t\t\tprintln!(\"You win!\");",
      "\t\t\tbreak;",
      "\t\t}",
      "\t}",
      "}"
    ]
  },
  "Print": {
    "prefix": ["print"],
    "body": ["println!(\"{}\", $1)"]
  },
  "Random": {
    "prefix": ["random"],
    "body": [
      "extern crate rand;",
      "use rand::Rng;",
      "fn main() {",
      "\tlet secret_number = rand::thread_rng().gen_range(1, 101);",
      "}"
    ]
  },
  "Read": {
    "prefix": ["read"],
    "body": [
      "io::stdin()",
      "\t.read_line($1)",
      "\t.expect(\"Failed to read line\");"
    ]
  },
  "Template": {
    "prefix": ["template"],
    "body": [
      "use std::io::stdin;",
      "fn read() -> i32 {",
      "\tlet mut s = String::new();",
      "\tstdin().read_line(&mut s).ok();",
      "\treturn s.trim().parse().unwrap();",
      "}",
      "",
      "fn main() {",
      "\tlet n = read();",
      "\tprintln!(\"{}\", ans);",
      "}"
    ]
  }
}
